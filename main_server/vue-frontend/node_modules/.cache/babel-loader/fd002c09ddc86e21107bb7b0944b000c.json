{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.clicked())\n  }, _toDisplayString($props.text), 1\n  /* TEXT */\n  );\n}","map":{"version":3,"mappings":";;uBACIA,oBAA8C,QAA9C,EAA8C;AAArCC,WAAK,sCAAIC,kBAAJ;AAAgC,GAA9C,mBAA+BC,YAA/B,EAAmC;AAAA;AAAnC","names":["_createElementBlock","onClick","$options","$props"],"sourceRoot":"","sources":["/Users/18chanp1/Library/CloudStorage/OneDrive-UBC/Active Use/UBC/20 Year 2/16 CPEN 291/04 Projects/P2_A_G20/music_control_webapp/vue-frontend/src/components/std_but.vue"],"sourcesContent":["<template>\n    <button @click = \"clicked()\">{{text}}</button>\n</template>\n\n<script>\n\n    export default{\n        name: 'std_but',\n        props:{\n            text: String\n        },\n        data(){\n            return{\n                count:0\n            }\n        },\n        methods:{\n            clicked(){\n                this.count++\n                this.$emit('pressed-button', this.text.concat(1))\n            }\n        }\n       \n    }\n</script>"]},"metadata":{},"sourceType":"module"}