{"ast":null,"code":"import std_but from \"/src/components/std_but.vue\";\nimport axios from 'axios';\nexport default {\n  name: 'musicInput',\n\n  data() {\n    return {\n      count: 0,\n      script: '',\n      typedscript: '',\n      error: ''\n    };\n  },\n\n  components: {\n    std_but\n  },\n  methods: {\n    clicked(nextchar) {\n      this.count++;\n      this.script = this.script.concat(nextchar);\n    },\n\n    reset() {\n      this.script = '';\n    },\n\n    async submitForm() {\n      var pattern = /^(([A-GR][1-9]+)*)$/;\n      console.log(pattern.test(this.typedscript));\n\n      if (pattern.test(this.typedscript)) {\n        console.log('submitted, typed');\n        const request = {\n          type: 'MusicInTyped',\n          arguments: this.typedscript\n        };\n        await axios.post('/api/input/', request).then(response => {\n          console.log(response);\n          this.showBar(\"Submission accepted\", 'G');\n        }).catch(error => {\n          console.log(error);\n          this.showBar(\"Server error. Please try again later.\", '');\n        });\n      } else {\n        console.log('inputerr');\n        this.showBar('Input error. Please study the input format in detail.', '');\n      }\n    },\n\n    async submitBut() {\n      console.log('submitted, button');\n      const request = {\n        type: 'MusicInButtoned',\n        arguments: this.script\n      };\n      await axios.post('/api/input/', request).then(response => {\n        console.log(response);\n        this.showBar(\"Submission accepted\", 'G');\n      }).catch(error => {\n        console.log(error);\n        this.showBar(\"Server error. Please try again later.\", '');\n      });\n    },\n\n    showBar(input, color) {\n      this.error = input;\n      var x = document.getElementById(\"snackbar\" + color);\n      x.className = \"show\";\n      setTimeout(function () {\n        x.className = x.className.replace(\"show\", \"\");\n      }, 3000);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA0EA,OAAOA,OAAP,MAAoB,6BAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEE,eAAc;AAEZC,MAAI,EAAE,YAFM;;AAGZC,MAAI,GAAE;AACF,WAAM;AACFC,WAAK,EAAC,CADJ;AAEFC,YAAM,EAAE,EAFN;AAGFC,iBAAW,EAAC,EAHV;AAIFC,WAAK,EAAE;AAJL,KAAN;AAMH,GAVW;;AAWZC,YAAU,EAAC;AACTR;AADS,GAXC;AAcZS,SAAO,EAAC;AACJC,WAAO,CAACC,QAAD,EAAU;AACf,WAAKP,KAAL;AACA,WAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYO,MAAZ,CAAmBD,QAAnB,CAAd;AACD,KAJG;;AAKJE,SAAK,GAAE;AACL,WAAKR,MAAL,GAAY,EAAZ;AACD,KAPG;;AAQJ,UAAMS,UAAN,GAAkB;AAChB,UAAIC,OAAM,GAAI,qBAAd;AACAC,aAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,IAAR,CAAa,KAAKZ,WAAlB,CAAZ;;AACA,UAAGS,OAAO,CAACG,IAAR,CAAa,KAAKZ,WAAlB,CAAH,EAAkC;AAChCU,eAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,cAAME,OAAM,GAAI;AACdC,cAAI,EAAE,cADQ;AAEdC,mBAAS,EAAE,KAAKf;AAFF,SAAhB;AAKA,cAAML,KAAI,CACPqB,IADG,CACE,aADF,EACiBH,OADjB,EAEHI,IAFG,CAEEC,QAAO,IAAI;AACfR,iBAAO,CAACC,GAAR,CAAYO,QAAZ;AACA,eAAKC,OAAL,CAAa,qBAAb,EAAoC,GAApC;AACD,SALG,EAKDC,KALC,CAKKnB,KAAI,IAAK;AAChBS,iBAAO,CAACC,GAAR,CAAYV,KAAZ;AACA,eAAKkB,OAAL,CAAa,uCAAb,EAAqD,EAArD;AACD,SARG,CAAN;AASF,OAhBA,MAgBO;AACLT,eAAO,CAACC,GAAR,CAAY,UAAZ;AACA,aAAKQ,OAAL,CAAa,uDAAb,EAAsE,EAAtE;AACF;AACD,KA/BG;;AA+BF,UAAME,SAAN,GAAiB;AACjBX,aAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,YAAME,OAAM,GAAI;AACdC,YAAI,EAAE,iBADQ;AAEdC,iBAAS,EAAE,KAAKhB;AAFF,OAAhB;AAKA,YAAMJ,KAAI,CACPqB,IADG,CACE,aADF,EACiBH,OADjB,EAEHI,IAFG,CAEEC,QAAO,IAAI;AACfR,eAAO,CAACC,GAAR,CAAYO,QAAZ;AACA,aAAKC,OAAL,CAAa,qBAAb,EAAoC,GAApC;AACD,OALG,EAKDC,KALC,CAKKnB,KAAI,IAAK;AAChBS,eAAO,CAACC,GAAR,CAAYV,KAAZ;AACA,aAAKkB,OAAL,CAAa,uCAAb,EAAqD,EAArD;AACD,OARG,CAAN;AASC,KA/CC;;AAgDFA,WAAO,CAACG,KAAD,EAAQC,KAAR,EAAe;AACpB,WAAKtB,KAAL,GAAaqB,KAAb;AACA,UAAIE,IAAIC,QAAQ,CAACC,cAAT,CAAwB,aAAaH,KAArC,CAAR;AACAC,OAAC,CAACG,SAAF,GAAc,MAAd;AACAC,gBAAU,CAAC,YAAU;AAAEJ,SAAC,CAACG,SAAF,GAAcH,CAAC,CAACG,SAAF,CAAYE,OAAZ,CAAoB,MAApB,EAA4B,EAA5B,CAAd;AAAgD,OAA7D,EAA+D,IAA/D,CAAV;AACD;;AArDC;AAdI,CAAd","names":["std_but","axios","name","data","count","script","typedscript","error","components","methods","clicked","nextchar","concat","reset","submitForm","pattern","console","log","test","request","type","arguments","post","then","response","showBar","catch","submitBut","input","color","x","document","getElementById","className","setTimeout","replace"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\UBC\\Year_2\\Term_2\\CPEN_291\\P2_A_G20\\main_server\\vue-frontend\\src\\views\\musicInput.vue"],"sourcesContent":["<template>\r\n<div class = \"General\">\r\n  <h1>Upload Music</h1>\r\n  <hr>\r\n\r\n  <h2>Option 1: Text Input</h2>\r\n  <p>\r\n    To input your song, please prepare the following information:\r\n    \r\n  </p>\r\n  <ol>\r\n    <li>The pitch of each note (e.g. C)</li>\r\n    <li>The length of each note (e.g. 1 relative unit)</li>\r\n  </ol>\r\n\r\n  <p>\r\n    Type in chronological order, the pitch of each note, followed by the relative length \r\n    of each note. Do not include spaces. \r\n  </p>\r\n\r\n  <p>\r\n    For example, if you wish to play the note C for 1 RU, followed by the note\r\n    B for 2 RU, you would input the following:\r\n  </p>\r\n\r\n  <p>\r\n    C1B2 \r\n  </p>\r\n\r\n  <form @submit.prevent=\"submitForm\">\r\n    <textarea v-model = \"typedscript\">Input your music here.</textarea>\r\n    <br/>\r\n    <input type=\"submit\" value=\"Submit\" class = \"flexbut\" id = \"ButtonForSubmit\">\r\n  </form>   \r\n  \r\n  <h2>Option 2: Button Input</h2>\r\n  \r\n  <p>\r\n    Push the buttons to input the corresponding note. The duration\r\n    defaults to 1 RU.\r\n  </p>\r\n\r\n  <form @submit.prevent = \"submitBut\">\r\n    <div class=\"noteInput\">\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"C\"/>\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"D\"/>\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"E\"/>\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"F\"/>\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"G\"/>\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"A\"/>\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"B\"/>\r\n      <std_but type = \"button\" @pressed-button = \"clicked($event)\" class=\"flexbut\" text = \"R\"/>\r\n    </div>\r\n\r\n    <p>\r\n      Your Input: \r\n    </p>\r\n\r\n    <p class=\"inputdisp\">{{this.script}} </p>\r\n\r\n    <div class=\"noteInput\">\r\n    <std_but type = \"button\" @pressed-button = \"reset()\" text = \"Reset\" class = \"flexbut\"/>\r\n    <std_but @pressed-button = \"submit()\" text = \"Submit\" class = \"flexbut\"/>\r\n    </div>\r\n\r\n    <div id=\"snackbar\">{{error}}</div>\r\n    <div id=\"snackbarG\">{{error}}</div>\r\n    \r\n  </form>\r\n\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport std_but from \"/src/components/std_but.vue\"\r\nimport axios from 'axios'\r\n\r\n  export default{\r\n    \r\n    name: 'musicInput',\r\n    data(){\r\n        return{\r\n            count:0,\r\n            script: '',\r\n            typedscript:'',\r\n            error: '',\r\n        }\r\n    },\r\n    components:{\r\n      std_but,\r\n    },\r\n    methods:{\r\n        clicked(nextchar){\r\n          this.count++\r\n          this.script = this.script.concat(nextchar)\r\n        },\r\n        reset(){\r\n          this.script=''\r\n        },\r\n        async submitForm(){\r\n          var pattern = /^(([A-GR][1-9]+)*)$/\r\n          console.log(pattern.test(this.typedscript))\r\n          if(pattern.test(this.typedscript)){\r\n            console.log('submitted, typed')\r\n            const request = {\r\n              type: 'MusicInTyped',\r\n              arguments: this.typedscript,\r\n            }\r\n            \r\n            await axios \r\n              .post('/api/input/', request)\r\n              .then(response =>{\r\n                console.log(response)\r\n                this.showBar(\"Submission accepted\", 'G')\r\n              }).catch(error => {\r\n                console.log(error)\r\n                this.showBar(\"Server error. Please try again later.\",'')\r\n              })\r\n          } else {\r\n            console.log('inputerr')\r\n            this.showBar('Input error. Please study the input format in detail.', '')\r\n          }\r\n        },async submitBut(){\r\n          console.log('submitted, button')\r\n          const request = {\r\n            type: 'MusicInButtoned',\r\n            arguments: this.script,\r\n          }\r\n          \r\n          await axios \r\n            .post('/api/input/', request)\r\n            .then(response =>{\r\n              console.log(response)\r\n              this.showBar(\"Submission accepted\", 'G')\r\n            }).catch(error => {\r\n              console.log(error)\r\n              this.showBar(\"Server error. Please try again later.\",'')\r\n            })\r\n          },\r\n          showBar(input, color) {\r\n            this.error = input\r\n            var x = document.getElementById(\"snackbar\" + color);\r\n            x.className = \"show\";\r\n            setTimeout(function(){ x.className = x.className.replace(\"show\", \"\"); }, 3000);\r\n          },\r\n    }\r\n       \r\n    }\r\n\r\n</script>\r\n\r\n\r\n<style>\r\n  h1{\r\n    font-family: Lato;\r\n    font-size: 38px;\r\n    font-weight: bold;\r\n    text-align: left;\r\n    margin-bottom: 3px;\r\n  }\r\n\r\n  hr {\r\n    border-top: 0.2px solid red;\r\n\r\n  }\r\n\r\n  h2{\r\n    font-family: Lato;\r\n    font-size: 36px;\r\n    font-weight: bold;\r\n    text-align: left;\r\n  }\r\n\r\n  p {\r\n    font-family: Noto Sans;\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    text-align: left;\r\n    max-width: 65ch;\r\n  }\r\n\r\n  ol {\r\n    font-family: Noto Sans;\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    text-align: left;\r\n    max-width: 65ch;\r\n  }\r\n\r\n  .General{\r\n    margin: auto;\r\n    max-width: 65ch;\r\n    justify-content: center;\r\n  }\r\n\r\n  .noteInput{\r\n    display: flex ;\r\n    background-color: #ffffff;\r\n    border-radius: 10px;\r\n    margin:10px;\r\n    padding: 30px;\r\n    justify-content: center;\r\n  }\r\n\r\n  /* .noteInput > div {\r\n    background-color: #f1f1f1;\r\n    margin: 3px;\r\n    padding: 20px;\r\n    font-size: 20px;\r\n    text-align: center;\r\n    border-radius: 10px;\r\n    flex-grow: 1;\r\n  } */\r\n\r\n  .flexbut{\r\n    font-family: Noto Sans;\r\n    background-color: #26374a;\r\n    color:white;\r\n    margin: 3px;\r\n    padding: 20px;\r\n    font-size: 20px;\r\n    text-align: center;\r\n    border-radius: 4px;\r\n    flex-grow: 1;\r\n    border: none;\r\n  }\r\n\r\n.flexbut:hover {\r\n  background-color: #1c578a;\r\n  outline:none;\r\n  }\r\n\r\n.button:active {\r\n  background-color: #16446c;\r\n  outline:none;\r\n}\r\n\r\n.inputdisp{\r\n  min-height: 40px;\r\n  border-style: solid;\r\n  padding: 10px;\r\n}\r\n\r\n.entryBox {\r\n  width: 205px; height: 39px\r\n}\r\n\r\n#ButtonForSubmit {\r\n  margin-top: 1em;\r\n}\r\n\r\n/* Snackbar */\r\n#snackbar {\r\n  border-radius: 4px;\r\n  visibility: hidden;\r\n  min-width: 250px;\r\n  margin-left: -125px;\r\n  background-color: #BB6464;\r\n  color: #fff;\r\n  text-align: center;\r\n  border-radius: 2px;\r\n  padding: 16px;\r\n  position: fixed;\r\n  z-index: 1;\r\n  left: 50%;\r\n  bottom: 30px;\r\n  font-size: 20px;\r\n}\r\n\r\n#snackbarG{\r\n  border-radius: 4px;\r\n  visibility: hidden;\r\n  min-width: 250px;\r\n  margin-left: -125px;\r\n  background-color: #88FF88;\r\n  color: #000000;\r\n  text-align: center;\r\n  border-radius: 2px;\r\n  padding: 16px;\r\n  position: fixed;\r\n  z-index: 1;\r\n  left: 50%;\r\n  bottom: 30px;\r\n  font-size: 20px;\r\n}\r\n\r\n#snackbar.show {\r\n  visibility: visible;\r\n  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;\r\n  animation: fadein 0.5s, fadeout 0.5s 2.5s;\r\n}\r\n\r\n#snackbarG.show {\r\n  visibility: visible;\r\n  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;\r\n  animation: fadein 0.5s, fadeout 0.5s 2.5s;\r\n}\r\n\r\n@-webkit-keyframes fadein {\r\n  from {bottom: 0; opacity: 0;} \r\n  to {bottom: 30px; opacity: 1;}\r\n}\r\n\r\n@keyframes fadein {\r\n  from {bottom: 0; opacity: 0;}\r\n  to {bottom: 30px; opacity: 1;}\r\n}\r\n\r\n@-webkit-keyframes fadeout {\r\n  from {bottom: 30px; opacity: 1;} \r\n  to {bottom: 0; opacity: 0;}\r\n}\r\n\r\n@keyframes fadeout {\r\n  from {bottom: 30px; opacity: 1;}\r\n  to {bottom: 0; opacity: 0;}\r\n}\r\n\r\n\r\ntextarea{\r\n  height : 15em;\r\n  width : 75ch;\r\n}\r\n\r\n  \r\n\r\n</style>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}